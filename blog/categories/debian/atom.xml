<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debian | David's Blog]]></title>
  <link href="http://davidcarlos.github.io/blog/categories/debian/atom.xml" rel="self"/>
  <link href="http://davidcarlos.github.io/"/>
  <updated>2016-04-27T22:57:33-03:00</updated>
  <id>http://davidcarlos.github.io/</id>
  <author>
    <name><![CDATA[David Carlos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preparando montangem de pendrive pelo arquivo fstab]]></title>
    <link href="http://davidcarlos.github.io/blog/2016/03/27/preparando-montangem-de-pendrive-pelo-arquivo-fstab/"/>
    <updated>2016-03-27T19:10:02-03:00</updated>
    <id>http://davidcarlos.github.io/blog/2016/03/27/preparando-montangem-de-pendrive-pelo-arquivo-fstab</id>
    <content type="html"><![CDATA[<p>Muitas vezes, ao tentarmos montar um pendrive, temos alguns problemas no linux.
Um desses problemas é o SO não reconhecer o pendrive no momento em que inserimos
o pendrive no pc. Uma forma de listar quais sistemas de arquivo estão montados
e em que diretório foram montados é utilizando o comando <code>mount</code>. O problema é que
se o linux não reconheceu o pendrive automaticamente, quando executarmos o comando
<code>mount</code>, nosso pendrive não será listado. Um forma(não a melhor forma, devo deixar isso
bem claro) de contornar esse problema é montar o pendrive manualmente. Para isso iremos
utilizar o comando <code>blkid</code>. Esse comando irá nos mostrar os <code>block devices</code>.</p>

<p><code>Block devices</code> são os dispositivos, no linux, que guardam dados, um pendrive por exemplo.
Quando executamos o comando <code>blkid</code>, iremos visualizar o seguinte:</p>

<p><img src="/images/blkid.png"></p>

<p>Agora ficou fácil, pois o comando <code>blkid</code> nos mostra o UUID do dispositivo. O <code>UUID</code> é um
identificador único para cada sistema de arquivos mantidos pelos <code>block devices</code>.</p>

<p>No arquivo /etc/fstab adicionamos a linha</p>

<pre><code>UUID=D488-3B7E /media/david vfat defaults
</code></pre>

<p>O primeiro argumento não precisa ser explicado, o segundo argumento é o diretório em que
o <code>block devices</code> será montado, e o terceiro argumento o define o tipo do sistema de arquivos.</p>

<p>Agora para montar o pendrive, basta fazer</p>

<pre><code> # mount /dev/sdb1
</code></pre>

<p>Nesse caso usamos /dev/sdb1 pois foi o que o comando blkid printou na tela, mas poderia
ser outro dispositivo.</p>

<p>Devo ressaltar que esse procedimento deve ser feito com cuidado e em ultimo caso, pois
ao adicionar um novo ponto de montagem no arquivo <code>/etc/fstab</code>, no momento em que a máquina
for iniciada, o kernel irá tentar montar esse device, e caso o pendrive não esteja conectado
na máquina, o sistema não irá inicializar corretamente.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian: Fazendo meu primeiro pacote - Parte 1]]></title>
    <link href="http://davidcarlos.github.io/blog/2016/03/17/meu-primeiro-pacote-no-debian/"/>
    <updated>2016-03-17T14:26:45-03:00</updated>
    <id>http://davidcarlos.github.io/blog/2016/03/17/meu-primeiro-pacote-no-debian</id>
    <content type="html"><![CDATA[<p>Quando abrimos nosso terminal e digitamos <code>sudo apt-get install mutt</code>, estamos
dizendo para o Debian, que queremos instalar um <code>pacote</code> chamado mutt usando o
gerenciador de pacotes <code>apt-get</code> e que estamos fazendo isso com permissões de root.</p>

<p>Não irei comentar nesse post como é a política de upload de pacotes no Debian,
além do fato de existir muita documentação do Debian relacionado a isso. Basicamente
o que irei comentar aqui, são as ferramentas necessárias para criar um pacote para
o debian, mais expecificamente um pacote em que o upstream é escrito em python.</p>

<p>Em resumo um pacote Debian é formado por:</p>

<pre><code> * Diretório debian
 * Código do upstream
</code></pre>

<p>Estamos considerando o caso em que não iremos criar um pacote do zero, logo o diretório
debian já irá existir. Para baixar a ultima versão do pacote no debian basta fazer:</p>

<pre><code>sudo apt-get source urlscan
</code></pre>

<p>Quando baixarmos o source do urlscan três arquivo e um diretório irão aparecer.</p>

<ol>
<li>urlscan_&lt;version>-&lt;release>.debian.tar.xz: Tarball com o diretório debian</li>
<li>urlscan_&lt;version>.orig.tar.xz: Tarball com o código do upstream inalterado.</li>
<li>urlscan_&lt;version>-&lt;release>.dsc: Arquivo que descreve a versão atual do pacote que acabamos de baixar.</li>
<li>urlscan-&lt;version>: Diretório com o código do upstream + diretório debian</li>
</ol>


<p>É dentro do diretório debian que iremos definir como o pacote será construido(aonde
os arquivos de configuração e os binários gerados serão colocados).
Basicamente o diretório debian deve ter no mínimo a os seguintes arquivos:</p>

<ol>
<li><em>changelog</em>: Registra tudo que foi feito no pacote e por quem</li>
<li><em>compat</em>: Define a versão do debhelper a ser usada (atualmente estamos na 9)</li>
<li><em>control</em>: Define quais as dependências de construção e instalação do pacote,
além de informações básicas requeridas pelo Debian, como o nome do pacote, uma breve
descrição, e etc.</li>
<li><em>rules</em>: Define o passo a passo para a construção do pacote. O Debian está ai
para te ajudar, então o recomendado é utilizar os helpers do Debian, e deixar que eles
façam o trabalho pesado. Pode ocorrer de que o comportamento padrão dos helpers não seja
o suficiente, então nesse caso, você pode sobrescrevê-los adicionando o que for necessário.</li>
<li><em>copyright</em>: Define a licença em que esse pacote será distribuído.</li>
<li><em>watch</em>: Nesse arquivo você definirá uma regex, que será executada pelo comando uscan,
para encontrar novas versões do upstream.</li>
</ol>


<p>O upstream é a pessoa,comunidade ou organização que desenvolve o código fonte do software
que você quer empacotar. Hoje em dia, boa parte dos upstreams estão em plataformas como github,
gitlab e sourceforge, então provavelmente seu arquivo <em>watch</em> irá apontar para um desses lugares.</p>

<p>O upstream que iremos empacotar será o urlscan(<a href="https://packages.qa.debian.org/u/urlscan.html">https://packages.qa.debian.org/u/urlscan.html</a>).
Esse programa faz o parser de arquivos html e extrai e apresenta urls de uma maneira amigável.
Esse pacote deve ser usado com um cliente de email que rode no terminal, como é o caso do mutt.</p>

<p>O primeiro passo a se fazer é tentar construir o pacote dentro do seu ambiente de
empacotamento(no meu caso eu uso o vagrant com o debian sid). Vale lembrar que sempre que formos
empacotar algo para o debian, obrigatoriamente temos que estar em um ambiente debian unstable.</p>

<p>Abra o arquivo <code>control</code> dentro do diretório debian, e veja quais os pacotes foram colocados
como dependência(Build-Depends-Indep). Iremos precisar instalá-los para que o pacote possa ser construído.</p>

<p>Com todas as dependências instaladas, e estando na raiz do diretório urlscan-&lt;version> execute o comando <code>debuild</code>.
Se tudo der certo teremos, um diretório acima do diretório raiz do source, um pacote .deb do urlscan.</p>

<p>Continuamos no proximo post =) .</p>
]]></content>
  </entry>
  
</feed>
