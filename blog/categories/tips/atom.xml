<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | David's Blog]]></title>
  <link href="http://davidcarlos.github.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://davidcarlos.github.io/"/>
  <updated>2016-05-23T15:52:08-03:00</updated>
  <id>http://davidcarlos.github.io/</id>
  <author>
    <name><![CDATA[David Carlos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preparando Montangem De Pendrive Pelo Arquivo Fstab]]></title>
    <link href="http://davidcarlos.github.io/blog/2016/03/27/preparando-montangem-de-pendrive-pelo-arquivo-fstab/"/>
    <updated>2016-03-27T19:10:02-03:00</updated>
    <id>http://davidcarlos.github.io/blog/2016/03/27/preparando-montangem-de-pendrive-pelo-arquivo-fstab</id>
    <content type="html"><![CDATA[<p>Muitas vezes, ao tentarmos montar um pendrive, temos alguns problemas no linux.
Um desses problemas é o SO não reconhecer o pendrive no momento em que inserimos
o pendrive no pc. Uma forma de listar quais sistemas de arquivo estão montados
e em que diretório foram montados é utilizando o comando <code>mount</code>. O problema é que
se o linux não reconheceu o pendrive automaticamente, quando executarmos o comando
<code>mount</code>, nosso pendrive não será listado. Um forma(não a melhor forma, devo deixar isso
bem claro) de contornar esse problema é montar o pendrive manualmente. Para isso iremos
utilizar o comando <code>blkid</code>. Esse comando irá nos mostrar os <code>block devices</code>.</p>

<p><code>Block devices</code> são os dispositivos, no linux, que guardam dados, um pendrive por exemplo.
Quando executamos o comando <code>blkid</code>, iremos visualizar o seguinte:</p>

<p><img src="/images/blkid.png"></p>

<p>Agora ficou fácil, pois o comando <code>blkid</code> nos mostra o UUID do dispositivo. O <code>UUID</code> é um
identificador único para cada sistema de arquivos mantidos pelos <code>block devices</code>.</p>

<p>No arquivo /etc/fstab adicionamos a linha</p>

<pre><code>UUID=D488-3B7E /media/david vfat defaults
</code></pre>

<p>O primeiro argumento não precisa ser explicado, o segundo argumento é o diretório em que
o <code>block devices</code> será montado, e o terceiro argumento o define o tipo do sistema de arquivos.</p>

<p>Agora para montar o pendrive, basta fazer</p>

<pre><code> # mount /dev/sdb1
</code></pre>

<p>Nesse caso usamos /dev/sdb1 pois foi o que o comando blkid printou na tela, mas poderia
ser outro dispositivo.</p>

<p>Devo ressaltar que esse procedimento deve ser feito com cuidado e em ultimo caso, pois
ao adicionar um novo ponto de montagem no arquivo <code>/etc/fstab</code>, no momento em que a máquina
for iniciada, o kernel irá tentar montar esse device, e caso o pendrive não esteja conectado
na máquina, o sistema não irá inicializar corretamente.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Salvando Arquivos Como Sudo]]></title>
    <link href="http://davidcarlos.github.io/blog/2016/02/27/vim-salvando-arquivos-como-sudo/"/>
    <updated>2016-02-27T21:37:21-03:00</updated>
    <id>http://davidcarlos.github.io/blog/2016/02/27/vim-salvando-arquivos-como-sudo</id>
    <content type="html"><![CDATA[<p>Esse é o primeiro post deste blog pessoal, e obvimente eu não poderia falar
de outra coisa, se não a ferramenta que eu mais uso durante o tempo em que estou
no pc, o vim. Será um post curto, então vamos ao que interessa.</p>

<p>Quando abrimos aquele arquivo que precisa de permissão de root para ser editado,
é muito chato ter que sair do vim e abrir o arquivo com sudo.</p>

<p><img src="/images/vim1.png"></p>

<p>Edite seu arquivo normalmente, e no momento de salvá-lo, ao invés de sair do vim
e entrar como sudo (você pode executar o seu
ultimo comando como sudo apenas fazendo <code>sudo !!</code>), basta fazer:</p>

<pre><code>   :w !sudo tee %
</code></pre>

<p>O vim pode pedir sua senha de sudo ou salvar automaticamente caso você já tenha usado alguma comando com sudo antes.
Você pode mapear esse comando no seu vimrc para facilitar na hora de salvar o arquivo.
No meu vimrc eu fiz o seguinte mapeamento:</p>

<pre><code>    nmap &lt;LEADER&gt;R :w !sudo tee %&lt;CR&gt;
</code></pre>

<p>Aonde <strong>&lt;LEADER></strong> equivale a virgula, nas minhas configurações.
Lembrando que para sair do arquivo você irá precisar forçar com <code>:q!</code></p>
]]></content>
  </entry>
  
</feed>
